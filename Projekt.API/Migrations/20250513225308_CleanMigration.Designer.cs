// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt.API.Model;

#nullable disable

namespace Projekt.API.Migrations
{
    [DbContext(typeof(MoviesDBContext))]
    [Migration("20250513225308_CleanMigration")]
    partial class CleanMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientMovie", b =>
                {
                    b.Property<int>("ClientsID")
                        .HasColumnType("int");

                    b.Property<int>("MoviesID")
                        .HasColumnType("int");

                    b.HasKey("ClientsID", "MoviesID");

                    b.HasIndex("MoviesID");

                    b.ToTable("ClientMovie");
                });

            modelBuilder.Entity("Projekt.API.Model.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Lastname = "Kowalski",
                            Name = "Jan",
                            UserID = 1
                        },
                        new
                        {
                            ID = 2,
                            Lastname = "Nowak",
                            Name = "Anna",
                            UserID = 2
                        });
                });

            modelBuilder.Entity("Projekt.API.Model.Movie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IsAvailable = true,
                            Name = "Harry Potter",
                            Rating = 7.0,
                            Type = "Fantasy"
                        },
                        new
                        {
                            ID = 2,
                            IsAvailable = true,
                            Name = "Skazany na Shawshank",
                            Rating = 8.6999999999999993,
                            Type = "Dramat"
                        },
                        new
                        {
                            ID = 3,
                            IsAvailable = true,
                            Name = "Coco",
                            Rating = 7.5,
                            Type = "Familijny"
                        });
                });

            modelBuilder.Entity("Projekt.API.Model.Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("ClientID", "MovieID")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Projekt.API.Model.Rental", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("MovieID");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("Projekt.API.Model.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan.kowalski@example.com",
                            PasswordHash = "6rHxyLo/hht170O4wmTrsQ==.L1ZHuJGOmRef671i6CSWTUQ2wYz9ZltYpbeiiqO0rNA=",
                            Role = 0
                        },
                        new
                        {
                            ID = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anna.nowak@example.com",
                            PasswordHash = "ipo/aVenxn+dLqGuOgu2yQ==.L+ASz444Zsti+63zgaZ9l+y7gAYwJZcUKvOdsxSqBLg=",
                            Role = 0
                        },
                        new
                        {
                            ID = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            PasswordHash = "1TWd66Rq1k8EG4IHpVUeZQ==.2n+AK1JE5Nm5eG00sQsh7rdEzINf+hMZqDowexfEY4g=",
                            Role = 1
                        });
                });

            modelBuilder.Entity("ClientMovie", b =>
                {
                    b.HasOne("Projekt.API.Model.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt.API.Model.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projekt.API.Model.Client", b =>
                {
                    b.HasOne("Projekt.API.Model.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("Projekt.API.Model.Client", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Projekt.API.Model.Rating", b =>
                {
                    b.HasOne("Projekt.API.Model.Client", "Client")
                        .WithMany("Ratings")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt.API.Model.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Projekt.API.Model.Rental", b =>
                {
                    b.HasOne("Projekt.API.Model.Client", "Client")
                        .WithMany("Rentals")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt.API.Model.Movie", "Movie")
                        .WithMany("Rentals")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Projekt.API.Model.Client", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Projekt.API.Model.Movie", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Projekt.API.Model.User", b =>
                {
                    b.Navigation("Client");
                });
#pragma warning restore 612, 618
        }
    }
}
